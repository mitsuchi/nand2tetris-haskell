// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=aInst); // A instruction?
    Or(a=aInst, b=instruction[5], out=writeA); // write to A? : inst[15] = 0 or inst[5] = 1
    ARegister(in=aIn, load=writeA, out=aOut, out[0..14]=addressM); // A register, addressM
    Mux16(a=aluOut, b=instruction, sel=aInst, out=aIn); // Mux left
    Mux16(a=aOut, b=inM, sel=instruction[12], out=y); // Mux right
    And(a=instruction[4], b=instruction[15], out=writeD); // write to D? : d2 and C instruction
    DRegister(in=aluOut, load=writeD, out=x); // D register
    ALU(x=x, y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut, out=outM, zr=zr, ng=ng); // ALU, outM
    And(a=instruction[3], b=instruction[15], out=writeM); // write to M? : d3 and C instruction
    PC(in=aOut, load=doJump, inc=doNotJump, reset=reset, out[0..14]=pc); // PC
    And(a=instruction[2], b=ng, out=j1Cond); // j1 and ng
    And(a=instruction[1], b=zr, out=j2Cond); // j2 and zr
    And(a=instruction[0], b=positive, out=j3Cond); // j3 and positive
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=notNg, b=notZr, out=positive);
    Or(a=j1Cond, b=j2Cond, out=j1j2Cond);
    Or(a=j1j2Cond, b=j3Cond, out=j1j2j3Cond);
    And(a=instruction[15], b=j1j2j3Cond, out=doJump); // doJump = Cinst and ((j1 and ng) or (j2 and zr) or (j3 and not ng))
    Not(in=doJump, out=doNotJump);
}